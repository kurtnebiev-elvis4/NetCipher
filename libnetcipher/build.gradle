import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'

dependencies {
    implementation 'androidx.core:core:1.15.0'
//    implementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
    androidTestImplementation 'junit:junit:4.13.2'
}

android {
    compileSdk 35
    buildToolsVersion '34.0.0'
    namespace 'info.guardianproject.netcipher'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            manifest.srcFile '../netciphertest/AndroidManifest.xml'
            java.srcDirs = ['../netciphertest/src']
            resources.srcDirs = ['../netciphertest/src']
            aidl.srcDirs = ['../netciphertest/src']
            renderscript.srcDirs = ['../netciphertest/src']
            res.srcDirs = ['../netciphertest/res']
            assets.srcDirs = ['../netciphertest/assets']
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        /*
          The Android Testing Support Library collects analytics to continuously improve the testing
          experience. More specifically, it uploads a hash of the package name of the application
          under test for each invocation. If you do not wish to upload this data, you can opt-out by
          passing the following argument to the test runner: disableAnalytics "true".
         */
        testInstrumentationRunnerArguments disableAnalytics: 'true'
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests. This is required
        // since there is no way to unset URL.setURLStreamHandlerFactory().
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    lintOptions {
        htmlReport true
        xmlReport false
        textReport false
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests {
            // prevent tests on JVM from dying on android.util.Log calls
            returnDefaultValues = true
            all {
                testLogging {
                    events "skipped", "failed", "standardOut", "standardError"
                    showStandardStreams = true
                }
            }
        }
    }
}

android.libraryVariants.configureEach { variant ->
    def name = variant.buildType.name
    if (name.equals(BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile, sourcesJar, javadocJar, createPom
    task.from variant.javaCompile.destinationDir
    task.exclude('info/guardianproject/**/BuildConfig.**')
    artifacts.add('archives', task);
    task.archiveBaseName.set('netcipher')
}

tasks.register('sourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    archiveBaseName.set('netcipher')
}

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    options.addStringOption('notimestamp')
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    failOnError false
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    archiveBaseName.set('netcipher')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven-publish'

tasks.register('createPom') {
    doLast {
        pom {
            project {
                name 'NetCipher'
                artifactId 'netcipher'
                inceptionYear '2012'
                url 'https://guardianproject.info/code/netcipher'
                description 'NetCipher is a library for Android that provides multiple means to improve network security in mobile applications. It provides best practices TLS settings using the standard Android HTTP methods, HttpURLConnection and Apache HTTP Client, provides simple Tor integration, makes it easy to configure proxies for HTTP connections and `WebView` instances.'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'guardianproject'
                        name = 'Guardian Project'
                        email = 'support@guardianproject.info'
                    }
                }
                issueManagement {
                    url = "https://gitlab.com/guardianproject/netcipher/issues"
                }
                scm {
                    connection = 'scm:git:https://gitlab.com/guardianproject/netcipher.git'
                    url = 'https://gitlab.com/guardianproject/netcipher'
                }
            }
        }.writeTo(project.getBuildDir().toString() + "/libs/" + "netcipher" + "-" + project.version + ".pom")
    }
}
